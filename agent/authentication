var document = require("document");

/**
 * Provides services to validate authentication tokens
 * @class AuthenticationService
 * @constructor
 * @param {Object} nodeManager: instance of /nodemanagement.NodeManager
 * @param {Object} directoryService: instance of /directoryDelegae.DirectoryService
 */
function AuthenticationService(nodeManager, directoryService, config) {
  
  this.nodeManager = nodeManager;
  this.directoryService = directoryService;
  if (config){
    
    for (var key in config){
      this[key] = config[key];
    }
  }
}

/**
 * Check auth token validity sent by a given service consumer. 
 * This method is implemented by service provider nodes. The method can check if the token is known
 * to the current service provider (persisted) or can ask the master node to authenticate the token
 * by invoking its 
 * and used by service provider nodes that belong to the cluster
 * @method verifyToken
 * @param {String} id: node id
 * @param {String} token: node's auth token
 * @return {Boolean} true is token is verified, false otherwise
 */
AuthenticationService.prototype.verifyToken = function(id, token) {
  
  if (!id || !token) {
    
    throw {
      errorCode: "Missing_Parameter",
      errorDetail: "AuthenticationService.verifyToken: id and token cannot be null or empty"
    };
  }
  
  // check if this token has already been saved
  var savedToken = this._getServiceConsumerToken(id);
  if (savedToken && savedToken == token){
    return true;
  }
  
  // if no token found or if no match, ask the master node to authenticate it
  var isValid = this.directoryService.isServiceConsumerTokenValid(id, token);
  if (isValid) {
    // perist token for further validation
    var resp = document.save({key: id, token: token});
    if (resp.metadata.status == "failure") {
      log.error("AuthenticationService.verifyToken: could not persist token (" + id + "," + token + ")\n" + JSON.stringify(resp));
    }
  }
  
  return isValid;
};

/**
 * Check auth token validity for a given node id. This method is implemented by master nodes
 * and used by service provider nodes that belong to the cluster
 * @method isAuthenticated
 * @param {String} id: node id
 * @param {String} token: node's auth token
 * @return {Boolean} true is token is verified, false otherwise
 */
AuthenticationService.prototype.isAuthenticated = function(id, token){  
 
  try {
    
    var node = this.nodeManager.getNode(id);
    return node.auth_token == token;
  }catch(exception){
   
    throw {
      errorCode: (exception.errorCode ? exception.errorCode : "Execution_Error"),
      errorDetail: "AuthenticationService.isAuthenticated: " + (exception.errorDetail ? exception.errorDetail : JSON.stringify(exception))
    };
  }  
};

/**
 * This method is implemented by service provider. it is invoked by a master node that wishes to notify
 * it's nodes about the revocation of a token (corresponding has been moved out of the cluster, or token has been renewed)
 * @method discardToken
 * @param {String} id: node id
 * @param {String} token: token
 * @return {Boolean} true if deleted, false otherwise
 */
AuthenticationService.prototype.discardToken = function(id, token){  
  
  var savedToken = this._getServiceConsumerToken(id)
  if (savedToken != token) {
    return false;
  }
  
  var resp = document.delete(id);
  if (resp.metadata.status == "failure") {
    
    log.error("AuthenticationService.verifyToken: could not delete token document " + id + "\n" + JSON.stringify(resp));
    return false;
  }
  
  return true;
};

/**
 * @method _getServiceConsumerToken
 * @param {String} id: node id,
 * @return {String} the token if found, null otherwise
 */
AuthenticationService.prototype._getServiceConsumerToken = function(id) {
  
  var resp = document.get(id);
  if (resp.metadata.status == "failure") {
    return null;
  }
  
  return resp.result.token;
};